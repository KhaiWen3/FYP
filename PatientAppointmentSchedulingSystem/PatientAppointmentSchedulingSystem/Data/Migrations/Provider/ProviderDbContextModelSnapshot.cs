// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PatientAppointmentSchedulingSystem.Pages.Data;

#nullable disable

namespace PatientAppointmentSchedulingSystem.Data.Migrations.Provider
{
    [DbContext(typeof(ProviderDbContext))]
    partial class ProviderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PatientAppointmentSchedulingSystem.Pages.ProviderDetails", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProviderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BedCount")
                        .HasColumnType("int");

                    b.Property<string>("ContactNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnershipType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProviderId");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("PatientAppointmentSchedulingSystem.Pages.ProviderSpecialty", b =>
                {
                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("ProviderId", "SpecialtyId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("ProviderSpecialties");
                });

            modelBuilder.Entity("PatientAppointmentSchedulingSystem.Pages.Specialty", b =>
                {
                    b.Property<int>("SpecialtyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialtyId"));

                    b.Property<string>("SpecialtyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecialtyId");

                    b.ToTable("Specialty");

                    b.HasData(
                        new
                        {
                            SpecialtyId = 1,
                            SpecialtyName = "Cardiology"
                        },
                        new
                        {
                            SpecialtyId = 2,
                            SpecialtyName = "Internal Medicine"
                        },
                        new
                        {
                            SpecialtyId = 3,
                            SpecialtyName = "Family Medicine"
                        },
                        new
                        {
                            SpecialtyId = 4,
                            SpecialtyName = "Pediatrics"
                        },
                        new
                        {
                            SpecialtyId = 5,
                            SpecialtyName = "Obstetrics & Gynecology"
                        },
                        new
                        {
                            SpecialtyId = 6,
                            SpecialtyName = "Orthopedic Surgery"
                        },
                        new
                        {
                            SpecialtyId = 7,
                            SpecialtyName = "General Surgery"
                        },
                        new
                        {
                            SpecialtyId = 8,
                            SpecialtyName = "Neurology"
                        },
                        new
                        {
                            SpecialtyId = 9,
                            SpecialtyName = "Psychiatry"
                        },
                        new
                        {
                            SpecialtyId = 10,
                            SpecialtyName = "Dermatology"
                        },
                        new
                        {
                            SpecialtyId = 11,
                            SpecialtyName = "Ophthalmology"
                        },
                        new
                        {
                            SpecialtyId = 12,
                            SpecialtyName = "Otorhinolaryngology (ENT)"
                        },
                        new
                        {
                            SpecialtyId = 13,
                            SpecialtyName = "Radiology (Diagnostic)"
                        },
                        new
                        {
                            SpecialtyId = 14,
                            SpecialtyName = "Emergency Medicine"
                        },
                        new
                        {
                            SpecialtyId = 15,
                            SpecialtyName = "Anesthesiology"
                        },
                        new
                        {
                            SpecialtyId = 16,
                            SpecialtyName = "Urology"
                        },
                        new
                        {
                            SpecialtyId = 17,
                            SpecialtyName = "Nephrology"
                        },
                        new
                        {
                            SpecialtyId = 18,
                            SpecialtyName = "Endocrinology"
                        },
                        new
                        {
                            SpecialtyId = 19,
                            SpecialtyName = "Gastroenterology"
                        },
                        new
                        {
                            SpecialtyId = 20,
                            SpecialtyName = "Pulmonology (Respiratory)"
                        },
                        new
                        {
                            SpecialtyId = 21,
                            SpecialtyName = "Oncology (Medical)"
                        },
                        new
                        {
                            SpecialtyId = 22,
                            SpecialtyName = "Hematology"
                        },
                        new
                        {
                            SpecialtyId = 23,
                            SpecialtyName = "Rheumatology"
                        },
                        new
                        {
                            SpecialtyId = 24,
                            SpecialtyName = "Infectious Diseases"
                        },
                        new
                        {
                            SpecialtyId = 25,
                            SpecialtyName = "Geriatrics"
                        },
                        new
                        {
                            SpecialtyId = 26,
                            SpecialtyName = "Physical Medicine & Rehabilitation"
                        },
                        new
                        {
                            SpecialtyId = 27,
                            SpecialtyName = "Pathology"
                        },
                        new
                        {
                            SpecialtyId = 28,
                            SpecialtyName = "Nuclear Medicine"
                        },
                        new
                        {
                            SpecialtyId = 29,
                            SpecialtyName = "Plastic Surgery"
                        },
                        new
                        {
                            SpecialtyId = 30,
                            SpecialtyName = "Neurosurgery"
                        });
                });

            modelBuilder.Entity("PatientAppointmentSchedulingSystem.Pages.ProviderSpecialty", b =>
                {
                    b.HasOne("PatientAppointmentSchedulingSystem.Pages.ProviderDetails", "Provider")
                        .WithMany("ProviderSpecialties")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PatientAppointmentSchedulingSystem.Pages.Specialty", "Specialty")
                        .WithMany("ProviderSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("PatientAppointmentSchedulingSystem.Pages.ProviderDetails", b =>
                {
                    b.Navigation("ProviderSpecialties");
                });

            modelBuilder.Entity("PatientAppointmentSchedulingSystem.Pages.Specialty", b =>
                {
                    b.Navigation("ProviderSpecialties");
                });
#pragma warning restore 612, 618
        }
    }
}
