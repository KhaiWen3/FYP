@* @page
@model PatientAppointmentSchedulingSystem.Pages.CheckInsuranceProviderModel
@{
}
import React, { useState, useMemo } from 'react';
import { Search, Filter, MapPin, Phone, Globe, Star, CheckCircle } from 'lucide-react';

const InsuranceProviderChecker = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedState, setSelectedState] = useState('');
  const [selectedType, setSelectedType] = useState('');
  const [showFilters, setShowFilters] = useState(false);

  // Sample insurance provider data
  const insuranceProviders = [
    {
      id: 1,
      name: "Blue Cross Blue Shield",
      type: "Health Insurance",
      states: ["California", "Texas", "New York", "Florida"],
      rating: 4.2,
      phone: "1-800-555-0123",
      website: "www.bcbs.com",
      coverageTypes: ["Individual", "Family", "Medicare", "Medicaid"],
      networkSize: "Large",
      specialties: ["Primary Care", "Specialists", "Emergency Care", "Mental Health"]
    },
    {
      id: 2,
      name: "Aetna",
      type: "Health Insurance",
      states: ["California", "Texas", "New York", "Illinois"],
      rating: 4.1,
      phone: "1-800-555-0456",
      website: "www.aetna.com",
      coverageTypes: ["Individual", "Family", "Employer", "Medicare"],
      networkSize: "Large",
      specialties: ["Primary Care", "Specialists", "Dental", "Vision"]
    },
    {
      id: 3,
      name: "Kaiser Permanente",
      type: "HMO",
      states: ["California", "Oregon", "Washington", "Colorado"],
      rating: 4.3,
      phone: "1-800-555-0789",
      website: "www.kaiserpermanente.org",
      coverageTypes: ["Individual", "Family", "Medicare", "Employer"],
      networkSize: "Medium",
      specialties: ["Integrated Care", "Preventive Care", "Mental Health", "Pharmacy"]
    },
    {
      id: 4,
      name: "Humana",
      type: "Health Insurance",
      states: ["Florida", "Texas", "Kentucky", "Louisiana"],
      rating: 3.9,
      phone: "1-800-555-0321",
      website: "www.humana.com",
      coverageTypes: ["Medicare", "Individual", "Employer"],
      networkSize: "Medium",
      specialties: ["Medicare Advantage", "Primary Care", "Specialists", "Wellness"]
    },
    {
      id: 5,
      name: "Cigna",
      type: "Health Insurance",
      states: ["New York", "Pennsylvania", "Connecticut", "Arizona"],
      rating: 4.0,
      phone: "1-800-555-0654",
      website: "www.cigna.com",
      coverageTypes: ["Individual", "Family", "Employer", "International"],
      networkSize: "Large",
      specialties: ["Global Coverage", "Mental Health", "Specialists", "Telehealth"]
    },
    {
      id: 6,
      name: "UnitedHealth",
      type: "Health Insurance",
      states: ["California", "Texas", "New York", "Florida", "Illinois"],
      rating: 4.0,
      phone: "1-800-555-0987",
      website: "www.uhc.com",
      coverageTypes: ["Individual", "Family", "Medicare", "Employer"],
      networkSize: "Large",
      specialties: ["Primary Care", "Specialists", "Urgent Care", "Wellness Programs"]
    }
  ];

  const states = [
    "California", "Texas", "New York", "Florida", "Illinois", 
    "Pennsylvania", "Oregon", "Washington", "Colorado", "Kentucky", 
    "Louisiana", "Connecticut", "Arizona"
  ];

  const insuranceTypes = ["Health Insurance", "HMO", "PPO", "Medicare", "Medicaid"];

  const filteredProviders = useMemo(() => {
    return insuranceProviders.filter(provider => {
      const matchesSearch = provider.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          provider.specialties.some(specialty => 
                            specialty.toLowerCase().includes(searchTerm.toLowerCase())
                          );
      
      const matchesState = !selectedState || provider.states.includes(selectedState);
      const matchesType = !selectedType || provider.type === selectedType;

      return matchesSearch && matchesState && matchesType;
    });
  }, [searchTerm, selectedState, selectedType]);

  const ProviderCard = ({ provider }) => (
    <div className="bg-white rounded-lg shadow-md border border-gray-200 p-6 hover:shadow-lg transition-shadow">
      <div className="flex justify-between items-start mb-4">
        <div>
          <h3 className="text-xl font-semibold text-gray-900 mb-1">{provider.name}</h3>
          <span className="inline-block bg-blue-100 text-blue-800 text-sm px-3 py-1 rounded-full">
            {provider.type}
          </span>
        </div>
        <div className="flex items-center">
          <Star className="w-4 h-4 text-yellow-400 fill-current mr-1" />
          <span className="text-sm font-medium text-gray-700">{provider.rating}</span>
        </div>
      </div>

      <div className="space-y-3">
        <div className="flex items-center text-gray-600">
          <MapPin className="w-4 h-4 mr-2" />
          <span className="text-sm">Available in: {provider.states.join(', ')}</span>
        </div>
        
        <div className="flex items-center text-gray-600">
          <Phone className="w-4 h-4 mr-2" />
          <span className="text-sm">{provider.phone}</span>
        </div>
        
        <div className="flex items-center text-gray-600">
          <Globe className="w-4 h-4 mr-2" />
          <span className="text-sm">{provider.website}</span>
        </div>
      </div>

      <div className="mt-4">
        <h4 className="text-sm font-medium text-gray-900 mb-2">Coverage Types:</h4>
        <div className="flex flex-wrap gap-2">
          {provider.coverageTypes.map((type, index) => (
            <span key={index} className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded">
              {type}
            </span>
          ))}
        </div>
      </div>

      <div className="mt-4">
        <h4 className="text-sm font-medium text-gray-900 mb-2">Specialties:</h4>
        <div className="flex flex-wrap gap-2">
          {provider.specialties.map((specialty, index) => (
            <span key={index} className="bg-purple-100 text-purple-800 text-xs px-2 py-1 rounded">
              {specialty}
            </span>
          ))}
        </div>
      </div>

      <div className="mt-4 pt-4 border-t border-gray-200">
        <div className="flex items-center justify-between">
          <span className="text-sm text-gray-600">
            Network Size: <span className="font-medium">{provider.networkSize}</span>
          </span>
          <button className="bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-blue-700 transition-colors">
            View Details
          </button>
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center">
            <CheckCircle className="w-8 h-8 text-blue-600 mr-3" />
            <h1 className="text-3xl font-bold text-gray-900">Insurance Provider Directory</h1>
          </div>
          <p className="mt-2 text-gray-600">Find and compare insurance providers in your area</p>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Search and Filters */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
          <div className="flex flex-col lg:flex-row gap-4">
            {/* Search Bar */}
            <div className="flex-1 relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
              <input
                type="text"
                placeholder="Search by provider name or specialty..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>

            {/* Filter Button */}
            <button
              onClick={() => setShowFilters(!showFilters)}
              className="lg:w-auto w-full bg-gray-100 text-gray-700 px-4 py-3 rounded-lg hover:bg-gray-200 transition-colors flex items-center justify-center"
            >
              <Filter className="w-5 h-5 mr-2" />
              Filters
            </button>
          </div>

          {/* Filter Options */}
          {showFilters && (
            <div className="mt-6 pt-6 border-t border-gray-200">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    State
                  </label>
                  <select
                    value={selectedState}
                    onChange={(e) => setSelectedState(e.target.value)}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">All States</option>
                    {states.map(state => (
                      <option key={state} value={state}>{state}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Insurance Type
                  </label>
                  <select
                    value={selectedType}
                    onChange={(e) => setSelectedType(e.target.value)}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">All Types</option>
                    {insuranceTypes.map(type => (
                      <option key={type} value={type}>{type}</option>
                    ))}
                  </select>
                </div>
              </div>

              <div className="mt-4 flex gap-2">
                <button
                  onClick={() => {
                    setSelectedState('');
                    setSelectedType('');
                    setSearchTerm('');
                  }}
                  className="text-sm text-gray-600 hover:text-gray-800"
                >
                  Clear all filters
                </button>
              </div>
            </div>
          )}
        </div>

        {/* Results Summary */}
        <div className="mb-6">
          <p className="text-gray-600">
            Showing {filteredProviders.length} provider{filteredProviders.length !== 1 ? 's' : ''}
            {selectedState && ` in ${selectedState}`}
            {selectedType && ` for ${selectedType}`}
          </p>
        </div>

        {/* Provider Grid */}
        {filteredProviders.length > 0 ? (
          <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
            {filteredProviders.map(provider => (
              <ProviderCard key={provider.id} provider={provider} />
            ))}
          </div>
        ) : (
          <div className="text-center py-12">
            <div className="w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
              <Search className="w-8 h-8 text-gray-400" />
            </div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">No providers found</h3>
            <p className="text-gray-600">Try adjusting your search criteria or filters</p>
          </div>
        )}

        {/* Help Section */}
        <div className="mt-12 bg-blue-50 rounded-lg p-6">
          <h2 className="text-lg font-semibold text-blue-900 mb-3">Need Help Choosing?</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-blue-800">
            <div>
              <h3 className="font-medium mb-2">Consider These Factors:</h3>
              <ul className="space-y-1">
                <li>• Network size and provider availability</li>
                <li>• Coverage for your specific needs</li>
                <li>• Premium costs and deductibles</li>
                <li>• Prescription drug coverage</li>
              </ul>
            </div>
            <div>
              <h3 className="font-medium mb-2">Next Steps:</h3>
              <ul className="space-y-1">
                <li>• Contact providers directly for quotes</li>
                <li>• Verify your doctors are in-network</li>
                <li>• Review plan documents carefully</li>
                <li>• Check enrollment periods</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default InsuranceProviderChecker; *@